print: print(3*'na')=nanana ; print(...,sep='**',end=' ')-separator np.'**', znak kończący (domyślnie \n) np spacja;
input()-pobierz z wejścia
------------------------------------
importowanie z bibliotek:

from biblioteka import coś - importuje tylko kawałek biblioteki 
import biblioteka - importuje cala bibliotekę
from biblioteka import * - importuj wszystko(niezalecane ale przydatne jak jest dużo rzeczy np. w turtle)

wazne importy:

import numpy as np
np.array[]- tablice numpajowe

import random 
randint(a,b) - int n a<=n<=b
choice(seq) wybór z seq czyli np z listy
random - float z zakresu [0;1)

import math 
sqrt - pierwiastek 

from turtle import
fd,bk,rt,lt-przód tył prawo lewo
goto(x,y),setpos(x,y) -ustaw pozycje na x,y
circle-koło
speed,ht,tracer-speed('fastest')- rysuj szybko, ht()- nie pokazuj strzałki symbolizujacej turtla,
pd,pu-opuść , podnieś dlugopis(pozwala regulować czy ruszać się i rysowac równocześnie
color,fillcolor- ustaw kolor, kolor wypełnienia
begin_fill,end_fill - zacznij wypelniac, skoncz wypełniać

---------------------------------
sortowanie:
coś.sort() posortuje coś rosnąco
coś. sort(key=...) sortuj według klucza
coś.sort(reverse=True) posortuje w odwrotnej kolejnosci
sorted(coś)-zwróci posortowana kopie obiektu coś

max(coś)-znajduje max wartosc
max(cos,key=...) np. max(lista,key=len)-maks wartosc w tym przypadku z listy wedlug zdanego klucza (tutaj: długość)
min(coś)-znajduje min wartośc 


----------------------------------
listy:
l=[1,2,3,4] iterujemy od zera
l.reverse()- odwróć listę [4,3,2,1]
l=[]-pusta lista
l[1]-drugi element 2
l[:]-wszystkie elementy [1,2,3,4]
l[2:4]-elementy [3,4]
l[1:]-elementy bez pierwszego [2,3,4]
l[:3]-elementy bez ostatniego [1,2,3]
l[::-1]-odwrócona lista 
len(l)-długość listy 4
l.append()-dodaj do listy
LIST COMPREHENSION
l=[for x in ...] - tworzy liste z elemenów x 
np. [for x in range(10)]=[0,1,2,3,4,5,6,7,8,9]

---------------------------
napisy:
''.join(l)-skleja wartości z tablicy w napis
------------------
rekurencja:
przypadek podstawowy(if)
odwołanie się funkcji do samej siebie ze zmienionymi wartosciami(else)
----------------
Zbiory
X=set() -pusty zbiór
A={1,2,3} B={1,3,5,7}
A | B suma {1,2,3,5,7}
A & B część wspólna {1,3}
A - B roznica {2}
X.add()-dodaj do zbioru
elem in zbior - zwraca True gdy e jest w zbiorze
elem not in zbior - Zwraca True gdy elem nie występuje w zbiorze(bardzo szybka operacja)
"zbiory skladne"- zbiory definiowane odrazu np. zbior= {(x,y) for x in range(4) for y in range(4)}
zbior={(0,0),(0,1),(1,1)...}
-----------------
pliki
plik=open('nazwapliku.txt')-otwarcie pliku
plik.close() -zamknięcie pliku
----------------------------------
funkcje
def nazwa_funkcji(argument):
	co robi
	return co_zwraca #opcjonalnie
	
argument- co funkcja przyjmuje (jeśli kilka argumentów to piszemy * np. *args)

lambda - małe funkcje zazwyczaj jednolinikowe mogą być w innej dużej funkcji lub osobno
np zwiększ= lambda n :n+1
zwieksz(2)=3


---------------------
slowniki (klucz-wartosć):
dict() - pusty slownik


